/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => SelectiveReadModePlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian2 = require("obsidian");

// settings.ts
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  readModeFiles: []
};
var SelectiveReadModeSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Selective Read Mode Settings" });
    this.plugin.settings.readModeFiles.forEach((path, index) => {
      new import_obsidian.Setting(containerEl).setName(`Note ${index + 1}`).addText(
        (text) => text.setPlaceholder("e.g. folder/note.md").setValue(path).onChange(async (value) => {
          this.plugin.settings.readModeFiles[index] = value;
          await this.plugin.saveSettings();
        })
      ).addExtraButton((button) => {
        button.setIcon("trash").setTooltip("Remove").onClick(async () => {
          this.plugin.settings.readModeFiles.splice(index, 1);
          await this.plugin.saveSettings();
          this.display();
        });
      });
    });
    new import_obsidian.Setting(containerEl).addButton((button) => {
      button.setButtonText("Add Note Path").setCta().onClick(async () => {
        this.plugin.settings.readModeFiles.push("");
        await this.plugin.saveSettings();
        this.display();
      });
    });
  }
};

// main.ts
var SelectiveReadModePlugin = class extends import_obsidian2.Plugin {
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new SelectiveReadModeSettingTab(this.app, this));
    this.registerEvent(
      this.app.workspace.on("file-open", (file) => {
        const view = this.app.workspace.getActiveViewOfType(import_obsidian2.MarkdownView);
        if (!file || !view)
          return;
        const path = file.path;
        const setMode = view.setMode;
        if (this.settings.readModeFiles.includes(path)) {
          setMode.call(view, "preview");
        } else {
          setMode.call(view, "source");
        }
      })
    );
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyIsICJzZXR0aW5ncy50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgUGx1Z2luLCBNYXJrZG93blZpZXcsIFRGaWxlIH0gZnJvbSBcIm9ic2lkaWFuXCI7XG5pbXBvcnQge1xuICBTZWxlY3RpdmVSZWFkTW9kZVNldHRpbmdUYWIsXG4gIFNlbGVjdGl2ZVJlYWRNb2RlU2V0dGluZ3MsXG4gIERFRkFVTFRfU0VUVElOR1MsXG59IGZyb20gXCIuL3NldHRpbmdzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNlbGVjdGl2ZVJlYWRNb2RlUGx1Z2luIGV4dGVuZHMgUGx1Z2luIHtcbiAgc2V0dGluZ3M6IFNlbGVjdGl2ZVJlYWRNb2RlU2V0dGluZ3M7XG5cbiAgYXN5bmMgb25sb2FkKCkge1xuICAgIGF3YWl0IHRoaXMubG9hZFNldHRpbmdzKCk7XG5cbiAgICB0aGlzLmFkZFNldHRpbmdUYWIobmV3IFNlbGVjdGl2ZVJlYWRNb2RlU2V0dGluZ1RhYih0aGlzLmFwcCwgdGhpcykpO1xuXG4gICAgdGhpcy5yZWdpc3RlckV2ZW50KFxuICAgICAgdGhpcy5hcHAud29ya3NwYWNlLm9uKFwiZmlsZS1vcGVuXCIsIChmaWxlOiBURmlsZSB8IG51bGwpID0+IHtcbiAgICAgICAgY29uc3QgdmlldyA9IHRoaXMuYXBwLndvcmtzcGFjZS5nZXRBY3RpdmVWaWV3T2ZUeXBlKE1hcmtkb3duVmlldyk7XG4gICAgICAgIGlmICghZmlsZSB8fCAhdmlldykgcmV0dXJuO1xuXG4gICAgICAgIGNvbnN0IHBhdGggPSBmaWxlLnBhdGg7XG5cbiAgICAgICAgY29uc3Qgc2V0TW9kZSA9IChcbiAgICAgICAgICB2aWV3IGFzIE1hcmtkb3duVmlldyAmIHtcbiAgICAgICAgICAgIHNldE1vZGU6IChtb2RlOiBcInByZXZpZXdcIiB8IFwic291cmNlXCIpID0+IHZvaWQ7XG4gICAgICAgICAgfVxuICAgICAgICApLnNldE1vZGU7XG5cbiAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3MucmVhZE1vZGVGaWxlcy5pbmNsdWRlcyhwYXRoKSkge1xuICAgICAgICAgIHNldE1vZGUuY2FsbCh2aWV3LCBcInByZXZpZXdcIik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2V0TW9kZS5jYWxsKHZpZXcsIFwic291cmNlXCIpO1xuICAgICAgICB9XG4gICAgICB9KSxcbiAgICApO1xuICB9XG5cbiAgYXN5bmMgbG9hZFNldHRpbmdzKCkge1xuICAgIHRoaXMuc2V0dGluZ3MgPSBPYmplY3QuYXNzaWduKHt9LCBERUZBVUxUX1NFVFRJTkdTLCBhd2FpdCB0aGlzLmxvYWREYXRhKCkpO1xuICB9XG5cbiAgYXN5bmMgc2F2ZVNldHRpbmdzKCkge1xuICAgIGF3YWl0IHRoaXMuc2F2ZURhdGEodGhpcy5zZXR0aW5ncyk7XG4gIH1cbn1cbiIsICJpbXBvcnQgeyBBcHAsIFBsdWdpblNldHRpbmdUYWIsIFNldHRpbmcgfSBmcm9tIFwib2JzaWRpYW5cIjtcbmltcG9ydCBTZWxlY3RpdmVSZWFkTW9kZVBsdWdpbiBmcm9tIFwiLi9tYWluXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2VsZWN0aXZlUmVhZE1vZGVTZXR0aW5ncyB7XG4gIHJlYWRNb2RlRmlsZXM6IHN0cmluZ1tdO1xufVxuXG5leHBvcnQgY29uc3QgREVGQVVMVF9TRVRUSU5HUzogU2VsZWN0aXZlUmVhZE1vZGVTZXR0aW5ncyA9IHtcbiAgcmVhZE1vZGVGaWxlczogW10sXG59O1xuXG5leHBvcnQgY2xhc3MgU2VsZWN0aXZlUmVhZE1vZGVTZXR0aW5nVGFiIGV4dGVuZHMgUGx1Z2luU2V0dGluZ1RhYiB7XG4gIHBsdWdpbjogU2VsZWN0aXZlUmVhZE1vZGVQbHVnaW47XG5cbiAgY29uc3RydWN0b3IoYXBwOiBBcHAsIHBsdWdpbjogU2VsZWN0aXZlUmVhZE1vZGVQbHVnaW4pIHtcbiAgICBzdXBlcihhcHAsIHBsdWdpbik7XG4gICAgdGhpcy5wbHVnaW4gPSBwbHVnaW47XG4gIH1cblxuICBkaXNwbGF5KCk6IHZvaWQge1xuICAgIGNvbnN0IHsgY29udGFpbmVyRWwgfSA9IHRoaXM7XG5cbiAgICBjb250YWluZXJFbC5lbXB0eSgpO1xuICAgIGNvbnRhaW5lckVsLmNyZWF0ZUVsKFwiaDJcIiwgeyB0ZXh0OiBcIlNlbGVjdGl2ZSBSZWFkIE1vZGUgU2V0dGluZ3NcIiB9KTtcblxuICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLnJlYWRNb2RlRmlsZXMuZm9yRWFjaCgocGF0aCwgaW5kZXgpID0+IHtcbiAgICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuICAgICAgICAuc2V0TmFtZShgTm90ZSAke2luZGV4ICsgMX1gKVxuICAgICAgICAuYWRkVGV4dCgodGV4dCkgPT5cbiAgICAgICAgICB0ZXh0XG4gICAgICAgICAgICAuc2V0UGxhY2Vob2xkZXIoXCJlLmcuIGZvbGRlci9ub3RlLm1kXCIpXG4gICAgICAgICAgICAuc2V0VmFsdWUocGF0aClcbiAgICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcbiAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MucmVhZE1vZGVGaWxlc1tpbmRleF0gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgKVxuICAgICAgICAuYWRkRXh0cmFCdXR0b24oKGJ1dHRvbikgPT4ge1xuICAgICAgICAgIGJ1dHRvblxuICAgICAgICAgICAgLnNldEljb24oXCJ0cmFzaFwiKVxuICAgICAgICAgICAgLnNldFRvb2x0aXAoXCJSZW1vdmVcIilcbiAgICAgICAgICAgIC5vbkNsaWNrKGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MucmVhZE1vZGVGaWxlcy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICAgICAgdGhpcy5kaXNwbGF5KCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbCkuYWRkQnV0dG9uKChidXR0b24pID0+IHtcbiAgICAgIGJ1dHRvblxuICAgICAgICAuc2V0QnV0dG9uVGV4dChcIkFkZCBOb3RlIFBhdGhcIilcbiAgICAgICAgLnNldEN0YSgpXG4gICAgICAgIC5vbkNsaWNrKGFzeW5jICgpID0+IHtcbiAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5yZWFkTW9kZUZpbGVzLnB1c2goXCJcIik7XG4gICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG4gICAgICAgICAgdGhpcy5kaXNwbGF5KCk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuICB9XG59XG4iXSwKICAibWFwcGluZ3MiOiAiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsSUFBQUEsbUJBQTRDOzs7QUNBNUMsc0JBQStDO0FBT3hDLElBQU0sbUJBQThDO0FBQUEsRUFDekQsZUFBZSxDQUFDO0FBQ2xCO0FBRU8sSUFBTSw4QkFBTixjQUEwQyxpQ0FBaUI7QUFBQSxFQUdoRSxZQUFZLEtBQVUsUUFBaUM7QUFDckQsVUFBTSxLQUFLLE1BQU07QUFDakIsU0FBSyxTQUFTO0FBQUEsRUFDaEI7QUFBQSxFQUVBLFVBQWdCO0FBQ2QsVUFBTSxFQUFFLFlBQVksSUFBSTtBQUV4QixnQkFBWSxNQUFNO0FBQ2xCLGdCQUFZLFNBQVMsTUFBTSxFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFFbkUsU0FBSyxPQUFPLFNBQVMsY0FBYyxRQUFRLENBQUMsTUFBTSxVQUFVO0FBQzFELFVBQUksd0JBQVEsV0FBVyxFQUNwQixRQUFRLFFBQVEsUUFBUSxHQUFHLEVBQzNCO0FBQUEsUUFBUSxDQUFDLFNBQ1IsS0FDRyxlQUFlLHFCQUFxQixFQUNwQyxTQUFTLElBQUksRUFDYixTQUFTLE9BQU8sVUFBVTtBQUN6QixlQUFLLE9BQU8sU0FBUyxjQUFjLEtBQUssSUFBSTtBQUM1QyxnQkFBTSxLQUFLLE9BQU8sYUFBYTtBQUFBLFFBQ2pDLENBQUM7QUFBQSxNQUNMLEVBQ0MsZUFBZSxDQUFDLFdBQVc7QUFDMUIsZUFDRyxRQUFRLE9BQU8sRUFDZixXQUFXLFFBQVEsRUFDbkIsUUFBUSxZQUFZO0FBQ25CLGVBQUssT0FBTyxTQUFTLGNBQWMsT0FBTyxPQUFPLENBQUM7QUFDbEQsZ0JBQU0sS0FBSyxPQUFPLGFBQWE7QUFDL0IsZUFBSyxRQUFRO0FBQUEsUUFDZixDQUFDO0FBQUEsTUFDTCxDQUFDO0FBQUEsSUFDTCxDQUFDO0FBRUQsUUFBSSx3QkFBUSxXQUFXLEVBQUUsVUFBVSxDQUFDLFdBQVc7QUFDN0MsYUFDRyxjQUFjLGVBQWUsRUFDN0IsT0FBTyxFQUNQLFFBQVEsWUFBWTtBQUNuQixhQUFLLE9BQU8sU0FBUyxjQUFjLEtBQUssRUFBRTtBQUMxQyxjQUFNLEtBQUssT0FBTyxhQUFhO0FBQy9CLGFBQUssUUFBUTtBQUFBLE1BQ2YsQ0FBQztBQUFBLElBQ0wsQ0FBQztBQUFBLEVBQ0g7QUFDRjs7O0FEckRBLElBQXFCLDBCQUFyQixjQUFxRCx3QkFBTztBQUFBLEVBRzFELE1BQU0sU0FBUztBQUNiLFVBQU0sS0FBSyxhQUFhO0FBRXhCLFNBQUssY0FBYyxJQUFJLDRCQUE0QixLQUFLLEtBQUssSUFBSSxDQUFDO0FBRWxFLFNBQUs7QUFBQSxNQUNILEtBQUssSUFBSSxVQUFVLEdBQUcsYUFBYSxDQUFDLFNBQXVCO0FBQ3pELGNBQU0sT0FBTyxLQUFLLElBQUksVUFBVSxvQkFBb0IsNkJBQVk7QUFDaEUsWUFBSSxDQUFDLFFBQVEsQ0FBQztBQUFNO0FBRXBCLGNBQU0sT0FBTyxLQUFLO0FBRWxCLGNBQU0sVUFDSixLQUdBO0FBRUYsWUFBSSxLQUFLLFNBQVMsY0FBYyxTQUFTLElBQUksR0FBRztBQUM5QyxrQkFBUSxLQUFLLE1BQU0sU0FBUztBQUFBLFFBQzlCLE9BQU87QUFDTCxrQkFBUSxLQUFLLE1BQU0sUUFBUTtBQUFBLFFBQzdCO0FBQUEsTUFDRixDQUFDO0FBQUEsSUFDSDtBQUFBLEVBQ0Y7QUFBQSxFQUVBLE1BQU0sZUFBZTtBQUNuQixTQUFLLFdBQVcsT0FBTyxPQUFPLENBQUMsR0FBRyxrQkFBa0IsTUFBTSxLQUFLLFNBQVMsQ0FBQztBQUFBLEVBQzNFO0FBQUEsRUFFQSxNQUFNLGVBQWU7QUFDbkIsVUFBTSxLQUFLLFNBQVMsS0FBSyxRQUFRO0FBQUEsRUFDbkM7QUFDRjsiLAogICJuYW1lcyI6IFsiaW1wb3J0X29ic2lkaWFuIl0KfQo=
