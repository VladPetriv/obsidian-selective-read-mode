/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => SelectiveReadModePlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian2 = require("obsidian");

// settings.ts
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  rules: []
};
var FileFolderSuggestModal = class extends import_obsidian.FuzzySuggestModal {
  constructor(app, onChoose, showFolders = true) {
    super(app);
    this.onChoose = onChoose;
    this.showFolders = showFolders;
  }
  getItems() {
    const items = [];
    const addItems = (folder) => {
      if (this.showFolders && folder.path) {
        items.push(folder);
      }
      for (const child of folder.children) {
        if (child instanceof import_obsidian.TFile && child.extension === "md") {
          items.push(child);
        } else if (child instanceof import_obsidian.TFolder) {
          addItems(child);
        }
      }
    };
    addItems(this.app.vault.getRoot());
    return items;
  }
  getItemText(item) {
    return item.path || "/";
  }
  onChooseItem(item) {
    this.onChoose(item);
  }
};
var SelectiveReadModeSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Selective Read Mode Settings" });
    new import_obsidian.Setting(containerEl).setName("Read Mode Rules").setDesc("Configure which files or folders should open in read mode").addButton((button) => {
      button.setButtonText("Add Rule").setCta().onClick(() => {
        new FileFolderSuggestModal(this.app, (item) => {
          const rule = {
            path: item.path,
            type: item instanceof import_obsidian.TFolder ? "folder" : "file"
          };
          this.plugin.settings.rules.push(rule);
          this.plugin.saveSettings();
          this.display();
        }).open();
      });
    });
    this.plugin.settings.rules.forEach((rule, index) => {
      const setting = new import_obsidian.Setting(containerEl).setName(rule.path || "/").setDesc(`Type: ${rule.type}`).addDropdown((dropdown) => {
        dropdown.addOption("file", "File").addOption("folder", "Folder").setValue(rule.type).onChange(async (value) => {
          rule.type = value;
          await this.plugin.saveSettings();
          this.display();
        });
      }).addExtraButton((button) => {
        button.setIcon("pencil").setTooltip("Change path").onClick(() => {
          new FileFolderSuggestModal(
            this.app,
            (item) => {
              rule.path = item.path;
              rule.type = item instanceof import_obsidian.TFolder ? "folder" : "file";
              this.plugin.saveSettings();
              this.display();
            },
            rule.type === "folder"
          ).open();
        });
      }).addExtraButton((button) => {
        button.setIcon("trash").setTooltip("Remove").onClick(async () => {
          this.plugin.settings.rules.splice(index, 1);
          await this.plugin.saveSettings();
          this.display();
        });
      });
      setting.nameEl.prepend(
        createSpan({
          text: rule.type === "folder" ? "\u{1F4C1} " : "\u{1F4C4} ",
          cls: "read-mode-icon"
        })
      );
    });
    containerEl.createEl("h3", { text: "Quick Actions" });
    new import_obsidian.Setting(containerEl).setName("Add current location").setDesc("Add the current file or its parent folder").addButton((button) => {
      button.setButtonText("Add Current File").onClick(async () => {
        const file = this.app.workspace.getActiveFile();
        if (file) {
          this.plugin.settings.rules.push({
            path: file.path,
            type: "file"
          });
          await this.plugin.saveSettings();
          this.display();
        }
      });
    }).addButton((button) => {
      button.setButtonText("Add Current Folder").onClick(async () => {
        const file = this.app.workspace.getActiveFile();
        if (file) {
          const folder = file.parent;
          if (folder) {
            this.plugin.settings.rules.push({
              path: folder.path,
              type: "folder"
            });
            await this.plugin.saveSettings();
            this.display();
          }
        }
      });
    });
  }
};

// main.ts
var SelectiveReadModePlugin = class extends import_obsidian2.Plugin {
  async onload() {
    await this.loadSettings();
    await this.migrateSettings();
    this.addSettingTab(new SelectiveReadModeSettingTab(this.app, this));
    this.registerEvent(
      this.app.workspace.on("file-open", (file) => {
        if (!file)
          return;
        setTimeout(() => {
          const view = this.app.workspace.getActiveViewOfType(import_obsidian2.MarkdownView);
          if (!view)
            return;
          if (this.shouldOpenInReadMode(file.path)) {
            view.setState({ mode: "preview" }, { history: false });
          }
        }, 100);
      })
    );
  }
  shouldOpenInReadMode(filePath) {
    const normalized = (0, import_obsidian2.normalizePath)(filePath);
    return this.settings.rules.some((rule) => {
      const rulePath = (0, import_obsidian2.normalizePath)(rule.path);
      if (rule.type === "file") {
        return rulePath === normalized;
      } else {
        if (!rulePath)
          return true;
        return normalized.startsWith(rulePath + "/") || normalized === rulePath;
      }
    });
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  async migrateSettings() {
    const data = await this.loadData();
    if ((data == null ? void 0 : data.readModeFiles) && !(data == null ? void 0 : data.rules)) {
      this.settings = {
        rules: data.readModeFiles.map((path) => ({
          path,
          type: "file"
        }))
      };
      await this.saveSettings();
    }
  }
};
//# sourceMappingURL=data:application/json;base64,
